{"version":3,"sources":["src/js/updateScore.js","src/js/savaScore.js","src/js/getResults.js","src/js/snake.js","src/js/init.js","index.js"],"names":["val","document","getElementById","innerHTML","score","key","Date","now","items","JSON","parse","localStorage","getItem","push","setItem","stringify","resultList","resultItems","querySelectorAll","results","length","map","item","Object","values","filter","index","indexOf","sort","a","b","reverse","slice","forEach","parentElement","removeChild","element","createElement","className","appendChild","Snake","GRID_SIZE","FPS","INTERVAL","AREA_WIDTH","AREA_HEIGHT","area","ctx","delta","then","crashed","started","preview","snake","x","y","dx","dy","tail","startLength","food","loop","bind","getContext","calcAreaSize","width","height","fillArea","startScreen","initialValue","changeDirectionListener","createSnake","requestAnimationFrame","autoChangeDirection","moveSnake","drawSnake","drawFood","checkSnakeLocation","size","Array","keys","_","coordinates","lineWidth","fillStyle","strokeStyle","fillRect","strokeRect","unshift","pop","newFoodPosition","postiionFor","coorList","t","pos","randomPosition","includes","window","addEventListener","keyCode","cels","Math","abs","min","max","round","random","floor","innerHeight","startBtn","newGameBtn","pauseBtn","resumeBtn","switchButtons","switches","classList","remove","add","init","start","pause","resume","initialize","getResults","module","setTimeout"],"mappings":"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","file":"snake.5c1b0f8a.map","sourceRoot":"..","sourcesContent":["export default val => {\n  const score = document.getElementById('score')\n\n  score.innerHTML = `score: ${val}`\n}\n","export default score => {\n  const key = Date.now()\n  const items = JSON.parse(localStorage.getItem('snakeScore')) || []\n  \n  items.push({ [key]: score })\n  localStorage.setItem('snakeScore', JSON.stringify(items))\n}\n","export default () => {\n  const resultList = document.getElementById('results')\n  const resultItems = [ ...document.querySelectorAll('.results__item') ]\n  let results = JSON.parse(localStorage.getItem('snakeScore')) || []\n\n  if (!results.length) return\n\n  results = results.map(item => Object.values(item)[0])\n  results = results.filter((item, index) => (item > 0) && (results.indexOf(item) == index))\n  results = results.sort((a, b) => a - b).reverse().slice(0, 5)\n\n  if (resultItems.length) {\n    resultItems.forEach(item => item.parentElement.removeChild(item))\n  }\n\n  results.forEach((item, index) => {\n    const element = document.createElement('li')\n    element.innerHTML = `${index + 1}. ${item}`\n    element.className = 'results__item'\n\n    resultList.appendChild(element)\n  })\n}\n","import updateScore from './updateScore'\nimport saveScore from './savaScore'\nimport getResults from './getResults'\n\nexport default class Snake {\n  constructor() {\n    this.GRID_SIZE = 20\n    this.FPS = 10\n    this.INTERVAL = 1000 / this.FPS\n    this.AREA_WIDTH\n    this.AREA_HEIGHT\n\n    this.area\n    this.ctx\n    this.now\n    this.delta\n\n    this.area\n    this.ctx\n\n    this.now\n    this.delta\n\n    this.then = Date.now()\n    this.crashed = false\n    this.started = false\n    this.preview = true\n    this.score = 0\n\n    this.snake = {\n      x: 100,\n      y: 100,\n      dx: 1,\n      dy: 0,\n      tail: [],\n      startLength: 4\n    }\n\n    this.food = {\n      x: 260,\n      y: 100\n    }\n\n    this.loop = this.loop.bind(this)\n  }\n\n  init() {\n    this.area = document.getElementById('area')\n    this.ctx = this.area.getContext('2d')\n\n    this.AREA_WIDTH = this.calcAreaSize\n    this.AREA_HEIGHT = this.calcAreaSize\n\n    this.area.width = this.AREA_WIDTH\n    this.area.height = this.AREA_HEIGHT\n\n    this.fillArea()\n    this.startScreen()\n  }\n\n  start() {\n    this.started = true\n    this.crashed = false\n    this.preview = false\n\n    this.initialValue()\n    this.changeDirectionListener()\n    this.createSnake(4)\n    this.loop()\n  }\n\n  pause() {\n    this.started = false\n  }\n\n  resume() {\n    this.started = true\n  }\n\n  loop() {\n    if (this.crashed) return\n\n    requestAnimationFrame(this.loop)\n\n    if (!this.started && !this.preview) return\n\n    this.now = Date.now()\n    this.delta = this.now - this.then\n\n    if (this.delta > this.INTERVAL) {\n      this.then = this.now - (this.delta % this.INTERVAL)\n\n      this.fillArea()\n\n      if (this.preview) {\n        this.autoChangeDirection()\n      }\n\n      this.moveSnake()\n      this.drawSnake()\n\n      if (!this.preview) {\n        this.drawFood()\n        this.checkSnakeLocation()\n      }\n    }\n  }\n\n  createSnake(size) {\n    [ ...Array(size).keys() ].forEach((_, index) => {\n      const coordinates = [ this.snake.x - (this.GRID_SIZE * index), this.snake.y, this.GRID_SIZE, this.GRID_SIZE ]\n\n      this.ctx.lineWidth = 3\n      this.ctx.fillStyle = 'green'\n      this.ctx.strokeStyle = '#39ff14'\n      this.ctx.fillRect( ...coordinates )\n      this.ctx.strokeRect( ...coordinates )\n      \n      this.snake.tail.push({ x: this.snake.x - (this.GRID_SIZE * index), y: this.snake.y })\n    })\n  }\n\n  moveSnake() {\n    this.snake.x += this.GRID_SIZE * this.snake.dx\n    this.snake.y += this.GRID_SIZE * this.snake.dy\n\n    this.snake.tail.unshift({ x: this.snake.x, y: this.snake.y })\n\n    if (this.snake.tail.length > this.snake.startLength) {\n      this.snake.tail.pop()\n    }\n  }\n\n  drawSnake() {\n    this.snake.tail.forEach(item => {\n      this.ctx.lineWidth = 3\n      this.ctx.fillStyle = 'green'\n      this.ctx.strokeStyle = '#39ff14'\n      this.ctx.fillRect(item.x, item.y, this.GRID_SIZE, this.GRID_SIZE)\n      this.ctx.strokeRect(item.x, item.y, this.GRID_SIZE, this.GRID_SIZE)\n    })\n  }\n\n  drawFood() {\n    this.ctx.lineWidth = 1\n    this.ctx.fillStyle = 'red'\n    this.ctx.strokeStyle = 'darkred'\n    this.ctx.fillRect(this.food.x, this.food.y, this.GRID_SIZE, this.GRID_SIZE)\n    this.ctx.strokeRect(this.food.x, this.food.y, this.GRID_SIZE, this.GRID_SIZE)\n  }\n\n  checkSnakeLocation() {\n    if (this.snake.x === 0 || this.snake.x === (this.AREA_WIDTH - this.GRID_SIZE) ||\n        this.snake.y === 0 || this.snake.y === (this.AREA_HEIGHT - this.GRID_SIZE)) {\n      this.crashed = true\n\n      saveScore(this.score)\n      getResults()\n    }\n\n    this.snake.tail.slice(1, this.snake.tail.length).forEach(item => {\n      if (this.snake.tail[0].x === item.x &&\n          this.snake.tail[0].y === item.y) {\n        this.crashed = true\n\n        saveScore(this.score)\n        getResults()\n      }\n    })\n\n    if (this.snake.x === this.food.x && this.snake.y === this.food.y) {\n      this.snake.tail.push({ x: this.food.x, y: this.food.y })\n\n      this.food.x = this.newFoodPosition('x')\n      this.food.y = this.newFoodPosition('y')\n\n      updateScore(this.score += 10)\n    }\n  }\n\n  newFoodPosition(postiionFor) {\n    const coorList = this.snake.tail.map(t => t[postiionFor])\n    let pos = this.randomPosition(this.GRID_SIZE, this.AREA_WIDTH - 2 * this.GRID_SIZE)\n\n    while (coorList.includes(pos)) {\n      pos = this.randomPosition(this.GRID_SIZE, this.AREA_WIDTH - 2 * this.GRID_SIZE)\n    }\n\n    return pos\n  }\n\n  changeDirectionListener() {\n    window.addEventListener('keydown', ({ keyCode }) => {\n      if (keyCode === 37 && this.snake.dx !== 1) {\n        this.snake.dx = -1\n        this.snake.dy = 0\n      }\n\n      if (keyCode === 38 && this.snake.dy !== 1) {\n        this.snake.dx = 0\n        this.snake.dy = -1\n      }\n\n      if (keyCode === 39 && this.snake.dx !== -1) {\n        this.snake.dx = 1\n        this.snake.dy = 0\n      }\n\n      if (keyCode === 40 && this.snake.dy !== -1) {\n        this.snake.dx = 0\n        this.snake.dy = 1\n      }\n    })\n  }\n\n  startScreen() {\n    this.snake.x = this.GRID_SIZE\n    this.snake.y = this.GRID_SIZE\n\n    this.createSnake(24)\n    this.loop()\n  }\n\n  autoChangeDirection() {\n    const cels = this.calcAreaSize\n\n    if (this.snake.x === Math.abs(cels - 2 * this.GRID_SIZE) && this.snake.dy === 0) {\n      this.snake.dx = 0\n      this.snake.dy = 1\n    }\n\n    if (this.snake.y === Math.abs(cels - 2 * this.GRID_SIZE) && this.snake.dy === 1) {\n      this.snake.dx = -1\n      this.snake.dy = 0\n    }\n\n    if (this.snake.x === this.GRID_SIZE && this.snake.dx === -1) {\n      this.snake.dx = 0\n      this.snake.dy = -1\n    }\n\n    if (this.snake.y === this.GRID_SIZE && this.snake.dy === -1) {\n      this.snake.dx = 1\n      this.snake.dy = 0\n    }\n  }\n\n  fillArea() {\n    this.ctx.lineWidth = 26\n    this.ctx.strokeStyle = '#4666FF'\n    this.ctx.fillStyle = '#000'\n    this.ctx.fillRect(0, 0, this.AREA_WIDTH, this.AREA_HEIGHT)\n    this.ctx.strokeRect(0, 0, this.AREA_WIDTH, this.AREA_HEIGHT)\n  }\n\n  initialValue() {\n    this.snake = {\n      x: 100,\n      y: 100,\n      dx: 1,\n      dy: 0,\n      tail: [],\n      startLength: 4\n    }\n\n    this.food = {\n      x: 260,\n      y: 100\n    }\n  }\n\n  randomPosition(min, max) {\n    return Math.round((Math.random() * (max - min) + min) / this.GRID_SIZE) * this.GRID_SIZE\n  }\n\n  get calcAreaSize() {\n    return Math.floor(window.innerHeight / this.GRID_SIZE) * this.GRID_SIZE\n  }\n}\n","import Snake from './snake'\n\nexport default () => {\n  const startBtn = document.getElementById('startButton')\n  const newGameBtn = document.getElementById('newGameButton')\n  const pauseBtn = document.getElementById('pauseButton')\n  const resumeBtn = document.getElementById('resumeButton')\n  const startScreen = document.getElementById('startScreen')\n  // const scoreList = document.getElementById('scoreListButton')\n  const snake = new Snake()\n\n  const switchButtons = switches => {\n    [startBtn, newGameBtn, pauseBtn, resumeBtn, startScreen].forEach((item, index) => {\n      if (switches[index]) {\n        item.classList.remove('hide')\n      } else {\n        item.classList.add('hide')\n        item.classList.remove('controlls__btn--active')\n      }\n    })\n  }\n\n  snake.init()\n\n  startBtn.addEventListener('click', () => {\n    snake.start()\n    switchButtons([0, 1, 1, 0, 0])\n\n    startScreen.classList.add('hide')\n  })\n\n  newGameBtn.addEventListener('click', () => {\n    snake.start()\n\n    switchButtons([0, 1, 1, 0, 0])\n  })\n\n  pauseBtn.addEventListener('click', () => {\n    snake.pause()\n    switchButtons([0, 1, 0, 1, 1])\n    resumeBtn.classList.add('controlls__btn--active')\n  })\n\n  resumeBtn.addEventListener('click', () => {\n    snake.resume()\n    switchButtons([0, 1, 1, 0, 0])\n  })\n}\n","import './src/styles/index.styl'\n\nimport init from './src/js/init'\nimport getResults from './src/js/getResults'\n\nconst initialize = () => {\n  const modules = [\n    getResults,\n    init\n  ]\n\n  modules.forEach(module => { setTimeout(module, 0) })\n}\n\nwindow.addEventListener('DOMContentLoaded', initialize)\n"]}